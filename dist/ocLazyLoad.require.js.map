{"version":3,"sources":["ocLazyLoad.core.js","ocLazyLoad.directive.js","ocLazyLoad.loaders.common.js","ocLazyLoad.loaders.core.js","ocLazyLoad.loaders.cssLoader.js","ocLazyLoad.loaders.requireJSLoader.js","ocLazyLoad.loaders.templatesLoader.js","ocLazyLoad.polyfill.ie8.js"],"names":[],"mappings":"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","file":"ocLazyLoad.require.js","sourcesContent":["((angular, window) => {\n    'use strict';\n\n    var regModules = ['ng', 'oc.lazyLoad'],\n        regInvokes = {},\n        regConfigs = [],\n        modulesToLoad = [],\n        recordDeclarations = [],\n        broadcast = angular.noop,\n        runBlocks = {},\n        justLoaded = [];\n\n    var ocLazyLoad = angular.module('oc.lazyLoad', ['ng']);\n\n    ocLazyLoad.provider('$ocLazyLoad', function($controllerProvider, $provide, $compileProvider, $filterProvider, $injector, $animateProvider) {\n        var modules = {},\n            providers = {\n                $controllerProvider: $controllerProvider,\n                $compileProvider: $compileProvider,\n                $filterProvider: $filterProvider,\n                $provide: $provide, // other things (constant, decorator, provider, factory, service)\n                $injector: $injector,\n                $animateProvider: $animateProvider\n            },\n            debug = false,\n            events = false,\n            moduleCache = [];\n\n        moduleCache.push = function(value) {\n            if(this.indexOf(value) === -1) {\n                Array.prototype.push.apply(this, arguments);\n            }\n        };\n\n        this.config = function(config) {\n            // If we want to define modules configs\n            if(angular.isDefined(config.modules)) {\n                if(angular.isArray(config.modules)) {\n                    angular.forEach(config.modules, moduleConfig => {\n                        modules[moduleConfig.name] = moduleConfig;\n                    });\n                } else {\n                    modules[config.modules.name] = config.modules;\n                }\n            }\n\n            if(angular.isDefined(config.debug)) {\n                debug = config.debug;\n            }\n\n            if(angular.isDefined(config.events)) {\n                events = config.events;\n            }\n        };\n\n        /**\n         * Get the list of existing registered modules\n         * @param element\n         */\n        this._init = function _init(element) {\n            // this is probably useless now because we override angular.bootstrap\n            if(modulesToLoad.length === 0) {\n                var elements = [element],\n                    names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],\n                    NG_APP_CLASS_REGEXP = /\\sng[:\\-]app(:\\s*([\\w\\d_]+);?)?\\s/,\n                    append = function append(elm) {\n                        return (elm && elements.push(elm));\n                    };\n\n                angular.forEach(names, name => {\n                    names[name] = true;\n                    append(document.getElementById(name));\n                    name = name.replace(':', '\\\\:');\n                    if(typeof(element[0]) !== 'undefined' && element[0].querySelectorAll) {\n                        angular.forEach(element[0].querySelectorAll(`.${ name }`), append);\n                        angular.forEach(element[0].querySelectorAll(`.${ name }\\\\:`), append);\n                        angular.forEach(element[0].querySelectorAll(`[${ name }]`), append);\n                    }\n                });\n\n                angular.forEach(elements, elm => {\n                    if(modulesToLoad.length === 0) {\n                        var className = ` ${ element.className } `;\n                        var match = NG_APP_CLASS_REGEXP.exec(className);\n                        if(match) {\n                            modulesToLoad.push((match[2] || '').replace(/\\s+/g, ','));\n                        } else {\n                            angular.forEach(elm.attributes, attr => {\n                                if(modulesToLoad.length === 0 && names[attr.name]) {\n                                    modulesToLoad.push(attr.value);\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n\n            if(modulesToLoad.length === 0 && !((window.jasmine || window.mocha) && angular.isDefined(angular.mock))) {\n                console.error('No module found during bootstrap, unable to init ocLazyLoad. You should always use the ng-app directive or angular.boostrap when you use ocLazyLoad.');\n            }\n\n            var addReg = function addReg(moduleName) {\n                if(regModules.indexOf(moduleName) === -1) {\n                    // register existing modules\n                    regModules.push(moduleName);\n                    var mainModule = angular.module(moduleName);\n\n                    // register existing components (directives, services, ...)\n                    _invokeQueue(null, mainModule._invokeQueue, moduleName);\n                    _invokeQueue(null, mainModule._configBlocks, moduleName); // angular 1.3+\n\n                    angular.forEach(mainModule.requires, addReg);\n                }\n            };\n\n            angular.forEach(modulesToLoad, moduleName => {\n                addReg(moduleName);\n            });\n\n            modulesToLoad = []; // reset for next bootstrap\n            recordDeclarations.pop(); // wait for the next lazy load\n        };\n\n        /**\n         * Like JSON.stringify but that doesn't throw on circular references\n         * @param obj\n         */\n        var stringify = function stringify(obj) {\n            var cache = [];\n            return JSON.stringify(obj, (key, value) => {\n                if(angular.isObject(value) && value !== null) {\n                    if(cache.indexOf(value) !== -1) {\n                        // Circular reference found, discard key\n                        return;\n                    }\n                    // Store value in our collection\n                    cache.push(value);\n                }\n                return value;\n            });\n        };\n\n        var hashCode = function hashCode(str) {\n            var hash = 0, i, chr, len;\n            if(str.length == 0) {\n                return hash;\n            }\n            for(i = 0, len = str.length; i < len; i++) {\n                chr = str.charCodeAt(i);\n                hash = (hash << 5) - hash + chr;\n                hash |= 0; // Convert to 32bit integer\n            }\n            return hash;\n        };\n\n        function _register(providers, registerModules, params) {\n            if(registerModules) {\n                var k, moduleName, moduleFn, tempRunBlocks = [];\n                for(k = registerModules.length - 1; k >= 0; k--) {\n                    moduleName = registerModules[k];\n                    if(!angular.isString(moduleName)) {\n                        moduleName = getModuleName(moduleName);\n                    }\n                    if(!moduleName || justLoaded.indexOf(moduleName) !== -1) {\n                        continue;\n                    }\n                    // new if not registered, and not a config name\n                    var newModule = regModules.indexOf(moduleName) === -1 && !modules[moduleName];\n                    moduleFn = ngModuleFct(moduleName);\n                    if(newModule) { // new module\n                        regModules.push(moduleName);\n                        _register(providers, moduleFn.requires, params);\n                    }\n                    if(moduleFn._runBlocks.length > 0) {\n                        // new run blocks detected! Replace the old ones (if existing)\n                        runBlocks[moduleName] = [];\n                        while(moduleFn._runBlocks.length > 0) {\n                            runBlocks[moduleName].push(moduleFn._runBlocks.shift());\n                        }\n                    }\n                    if(angular.isDefined(runBlocks[moduleName]) && (newModule || params.rerun)) {\n                        tempRunBlocks = tempRunBlocks.concat(runBlocks[moduleName]);\n                    }\n                    _invokeQueue(providers, moduleFn._invokeQueue, moduleName, params.reconfig);\n                    _invokeQueue(providers, moduleFn._configBlocks, moduleName, params.reconfig); // angular 1.3+\n                    broadcast(newModule ? 'ocLazyLoad.moduleLoaded' : 'ocLazyLoad.moduleReloaded', moduleName);\n                    registerModules.pop();\n                    justLoaded.push(moduleName);\n                }\n                // execute the run blocks at the end\n                var instanceInjector = providers.getInstanceInjector();\n                angular.forEach(tempRunBlocks, fn => {\n                    instanceInjector.invoke(fn);\n                });\n            }\n        }\n\n        function _registerInvokeList(args, moduleName) {\n            var invokeList = args[2][0],\n                type = args[1],\n                newInvoke = false;\n            if(angular.isUndefined(regInvokes[moduleName])) {\n                regInvokes[moduleName] = {};\n            }\n            if(angular.isUndefined(regInvokes[moduleName][type])) {\n                regInvokes[moduleName][type] = {};\n            }\n            var onInvoke = function(invokeName, signature) {\n                if(!regInvokes[moduleName][type].hasOwnProperty(invokeName)) {\n                    regInvokes[moduleName][type][invokeName] = [];\n                }\n                if(regInvokes[moduleName][type][invokeName].indexOf(signature) === -1) {\n                    newInvoke = true;\n                    regInvokes[moduleName][type][invokeName].push(signature);\n                    broadcast('ocLazyLoad.componentLoaded', [moduleName, type, invokeName]);\n                }\n            };\n\n            function signature(data) {\n                if(angular.isArray(data)) { // arrays are objects, we need to test for it first\n                    return hashCode(data.toString());\n                } else if(angular.isObject(data)) { // constants & values for example\n                    return hashCode(stringify(data));\n                } else {\n                    if(angular.isDefined(data) && data !== null) {\n                        return hashCode(data.toString());\n                    } else { // null & undefined constants\n                        return data;\n                    }\n                }\n            }\n\n            if(angular.isString(invokeList)) {\n                onInvoke(invokeList, signature(args[2][1]));\n            } else if(angular.isObject(invokeList)) {\n                angular.forEach(invokeList, function(invoke, key) {\n                    if(angular.isString(invoke)) { // decorators for example\n                        onInvoke(invoke, signature(invokeList[1]));\n                    } else { // components registered as object lists {\"componentName\": function() {}}\n                        onInvoke(key, signature(invoke));\n                    }\n                });\n            } else {\n                return false;\n            }\n            return newInvoke;\n        }\n\n        function _invokeQueue(providers, queue, moduleName, reconfig) {\n            if(!queue) {\n                return;\n            }\n\n            var i, len, args, provider;\n            for(i = 0, len = queue.length; i < len; i++) {\n                args = queue[i];\n                if(angular.isArray(args)) {\n                    if(providers !== null) {\n                        if(providers.hasOwnProperty(args[0])) {\n                            provider = providers[args[0]];\n                        } else {\n                            throw new Error(`unsupported provider ${ args[0] }`);\n                        }\n                    }\n                    var isNew = _registerInvokeList(args, moduleName);\n                    if(args[1] !== 'invoke') {\n                        if(isNew && angular.isDefined(provider)) {\n                            provider[args[1]].apply(provider, args[2]);\n                        }\n                    } else { // config block\n                        var callInvoke = function(fct) {\n                            var invoked = regConfigs.indexOf(`${ moduleName }-${ fct }`);\n                            if(invoked === -1 || reconfig) {\n                                if(invoked === -1) {\n                                    regConfigs.push(`${ moduleName }-${ fct }`);\n                                }\n                                if(angular.isDefined(provider)) {\n                                    provider[args[1]].apply(provider, args[2]);\n                                }\n                            }\n                        };\n                        if(angular.isFunction(args[2][0])) {\n                            callInvoke(args[2][0]);\n                        } else if(angular.isArray(args[2][0])) {\n                            for(var j = 0, jlen = args[2][0].length; j < jlen; j++) {\n                                if(angular.isFunction(args[2][0][j])) {\n                                    callInvoke(args[2][0][j]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        function getModuleName(module) {\n            var moduleName = null;\n            if(angular.isString(module)) {\n                moduleName = module;\n            } else if(angular.isObject(module) && module.hasOwnProperty('name') && angular.isString(module.name)) {\n                moduleName = module.name;\n            }\n            return moduleName;\n        }\n\n        function moduleExists(moduleName) {\n            if(!angular.isString(moduleName)) {\n                return false;\n            }\n            try {\n                return ngModuleFct(moduleName);\n            } catch(e) {\n                if(/No module/.test(e) || e.message.indexOf('$injector:nomod') > -1) {\n                    return false;\n                }\n            }\n        }\n\n        this.$get = function($log, $rootElement, $rootScope, $cacheFactory, $q) {\n            var instanceInjector,\n                filesCache = $cacheFactory('ocLazyLoad');\n\n            if(!debug) {\n                $log = {};\n                $log['error'] = angular.noop;\n                $log['warn'] = angular.noop;\n                $log['info'] = angular.noop;\n            }\n\n            // Make this lazy because when $get() is called the instance injector hasn't been assigned to the rootElement yet\n            providers.getInstanceInjector = function() {\n                return instanceInjector ? instanceInjector : (instanceInjector = ($rootElement.data('$injector') || angular.injector()));\n            };\n\n            broadcast = function broadcast(eventName, params) {\n                if(events) {\n                    $rootScope.$broadcast(eventName, params);\n                }\n                if(debug) {\n                    $log.info(eventName, params);\n                }\n            };\n\n            function reject(e) {\n                var deferred = $q.defer();\n                $log.error(e.message);\n                deferred.reject(e);\n                return deferred.promise;\n            }\n\n            return {\n                _broadcast: broadcast,\n\n                _$log: $log,\n\n                /**\n                 * Returns the files cache used by the loaders to store the files currently loading\n                 * @returns {*}\n                 */\n                _getFilesCache: function getFilesCache() {\n                    return filesCache;\n                },\n\n                /**\n                 * Let the service know that it should monitor angular.module because files are loading\n                 * @param watch boolean\n                 */\n                toggleWatch: function(watch) {\n                    if(watch) {\n                        recordDeclarations.push(true);\n                    } else {\n                        recordDeclarations.pop();\n                    }\n                },\n\n                /**\n                 * Let you get a module config object\n                 * @param moduleName String the name of the module\n                 * @returns {*}\n                 */\n                getModuleConfig: function(moduleName) {\n                    if(!angular.isString(moduleName)) {\n                        throw new Error('You need to give the name of the module to get');\n                    }\n                    if(!modules[moduleName]) {\n                        return null;\n                    }\n                    return angular.copy(modules[moduleName]);\n                },\n\n                /**\n                 * Let you define a module config object\n                 * @param moduleConfig Object the module config object\n                 * @returns {*}\n                 */\n                setModuleConfig: function(moduleConfig) {\n                    if(!angular.isObject(moduleConfig)) {\n                        throw new Error('You need to give the module config object to set');\n                    }\n                    modules[moduleConfig.name] = moduleConfig;\n                    return moduleConfig;\n                },\n\n                /**\n                 * Returns the list of loaded modules\n                 * @returns {string[]}\n                 */\n                getModules: () => regModules,\n\n                /**\n                 * Let you check if a module has been loaded into Angular or not\n                 * @param modulesNames String/Object a module name, or a list of module names\n                 * @returns {boolean}\n                 */\n                isLoaded: function(modulesNames) {\n                    var moduleLoaded = function(module) {\n                        var isLoaded = regModules.indexOf(module) > -1;\n                        if(!isLoaded) {\n                            isLoaded = !!moduleExists(module);\n                        }\n                        return isLoaded;\n                    };\n                    if(angular.isString(modulesNames)) {\n                        modulesNames = [modulesNames];\n                    }\n                    if(angular.isArray(modulesNames)) {\n                        var i, len;\n                        for(i = 0, len = modulesNames.length; i < len; i++) {\n                            if(!moduleLoaded(modulesNames[i])) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    } else {\n                        throw new Error('You need to define the module(s) name(s)');\n                    }\n                },\n\n                /**\n                 * Given a module, return its name\n                 * @param module\n                 * @returns {String}\n                 */\n                _getModuleName: getModuleName,\n\n                /**\n                 * Returns a module if it exists\n                 * @param moduleName\n                 * @returns {module}\n                 */\n                _getModule: function getModule(moduleName) {\n                    try {\n                        return ngModuleFct(moduleName);\n                    } catch(e) {\n                        // this error message really suxx\n                        if(/No module/.test(e) || e.message.indexOf('$injector:nomod') > -1) {\n                            e.message = `The module \"${ stringify(moduleName) }\" that you are trying to load does not exist. ${ e.message }`;\n                        }\n                        throw e;\n                    }\n                },\n\n                /**\n                 * Check if a module exists and returns it if it does\n                 * @param moduleName\n                 * @returns {boolean}\n                 */\n                moduleExists: moduleExists,\n\n                /**\n                 * Load the dependencies, and might try to load new files depending on the config\n                 * @param moduleName (String or Array of Strings)\n                 * @param localParams\n                 * @returns {*}\n                 * @private\n                 */\n                _loadDependencies: function _loadDependencies(moduleName, localParams) {\n                    var loadedModule,\n                        requires,\n                        diff,\n                        promisesList = [],\n                        self = this;\n\n                    moduleName = self._getModuleName(moduleName);\n\n                    if(moduleName === null) {\n                        return $q.when();\n                    } else {\n                        try {\n                            loadedModule = self._getModule(moduleName);\n                        } catch(e) {\n                            return reject(e);\n                        }\n                        // get unloaded requires\n                        requires = self.getRequires(loadedModule);\n                    }\n\n                    angular.forEach(requires, requireEntry => {\n                        // If no configuration is provided, try and find one from a previous load.\n                        // If there isn't one, bail and let the normal flow run\n                        if(angular.isString(requireEntry)) {\n                            var config = self.getModuleConfig(requireEntry);\n                            if(config === null) {\n                                moduleCache.push(requireEntry); // We don't know about this module, but something else might, so push it anyway.\n                                return;\n                            }\n                            requireEntry = config;\n                            // ignore the name because it's probably not a real module name\n                            config.name = undefined;\n                        }\n\n                        // Check if this dependency has been loaded previously\n                        if(self.moduleExists(requireEntry.name)) {\n                            // compare against the already loaded module to see if the new definition adds any new files\n                            diff = requireEntry.files.filter(n => self.getModuleConfig(requireEntry.name).files.indexOf(n) < 0);\n\n                            // If the module was redefined, advise via the console\n                            if(diff.length !== 0) {\n                                self._$log.warn('Module \"', moduleName, '\" attempted to redefine configuration for dependency. \"', requireEntry.name, '\"\\n Additional Files Loaded:', diff);\n                            }\n\n                            // Push everything to the file loader, it will weed out the duplicates.\n                            if(angular.isDefined(self.filesLoader)) { // if a files loader is defined\n                                promisesList.push(self.filesLoader(requireEntry, localParams).then(() => self._loadDependencies(requireEntry)));\n                            } else {\n                                return reject(new Error(`Error: New dependencies need to be loaded from external files (${requireEntry.files}), but no loader has been defined.`));\n                            }\n                            return;\n                        } else if(angular.isArray(requireEntry)) {\n                            var files = [];\n                            angular.forEach(requireEntry, entry => {\n                                // let's check if the entry is a file name or a config name\n                                var config = self.getModuleConfig(entry);\n                                if (config === null) {\n                                    files.push(entry);\n                                } else if(config.files) {\n                                    files = files.concat(config.files);\n                                }\n                            });\n                            if(files.length > 0) {\n                                requireEntry = {\n                                    files: files\n                                };\n                            }\n                        } else if(angular.isObject(requireEntry)) {\n                            if(requireEntry.hasOwnProperty('name') && requireEntry['name']) {\n                                // The dependency doesn't exist in the module cache and is a new configuration, so store and push it.\n                                self.setModuleConfig(requireEntry);\n                                moduleCache.push(requireEntry['name']);\n                            }\n                        }\n\n                        // Check if the dependency has any files that need to be loaded. If there are, push a new promise to the promise list.\n                        if(angular.isDefined(requireEntry.files) && requireEntry.files.length !== 0) {\n                            if(angular.isDefined(self.filesLoader)) { // if a files loader is defined\n                                promisesList.push(self.filesLoader(requireEntry, localParams).then(() => self._loadDependencies(requireEntry)));\n                            } else {\n                                return reject(new Error(`Error: the module \"${requireEntry.name}\" is defined in external files (${requireEntry.files}), but no loader has been defined.`));\n                            }\n                        }\n                    });\n\n                    // Create a wrapper promise to watch the promise list and resolve it once everything is done.\n                    return $q.all(promisesList);\n                },\n\n                /**\n                 * Inject new modules into Angular\n                 * @param moduleName\n                 * @param localParams\n                 */\n                inject: function(moduleName, localParams = {}) {\n                    var self = this,\n                        deferred = $q.defer();\n                    if(angular.isDefined(moduleName) && moduleName !== null) {\n                        if(angular.isArray(moduleName)) {\n                            var promisesList = [];\n                            angular.forEach(moduleName, module => {\n                                promisesList.push(self.inject(module));\n                            });\n                            return $q.all(promisesList);\n                        } else {\n                            self._addToLoadList(self._getModuleName(moduleName), true);\n                        }\n                    }\n                    if(modulesToLoad.length > 0) {\n                        var res = modulesToLoad.slice(); // clean copy\n                        var loadNext = function loadNext(moduleName) {\n                            moduleCache.push(moduleName);\n                            self._loadDependencies(moduleName, localParams).then(function success() {\n                                try {\n                                    justLoaded = [];\n                                    _register(providers, moduleCache, localParams);\n                                } catch(e) {\n                                    self._$log.error(e.message);\n                                    deferred.reject(e);\n                                    return;\n                                }\n\n                                if(modulesToLoad.length > 0) {\n                                    loadNext(modulesToLoad.shift()); // load the next in list\n                                } else {\n                                    deferred.resolve(res); // everything has been loaded, resolve\n                                }\n                            }, function error(err) {\n                                deferred.reject(err);\n                            });\n                        };\n\n                        // load the first in list\n                        loadNext(modulesToLoad.shift());\n                    } else {\n                        deferred.resolve();\n                    }\n                    return deferred.promise;\n                },\n\n                /**\n                 * Get the list of required modules/services/... for this module\n                 * @param module\n                 * @returns {Array}\n                 */\n                getRequires: function getRequires(module) {\n                    var requires = [];\n                    angular.forEach(module.requires, requireModule => {\n                        if(regModules.indexOf(requireModule) === -1) {\n                            requires.push(requireModule);\n                        }\n                    });\n                    return requires;\n                },\n\n                /**\n                 * Invoke the new modules & component by their providers\n                 * @param providers\n                 * @param queue\n                 * @param moduleName\n                 * @param reconfig\n                 * @private\n                 */\n                _invokeQueue: _invokeQueue,\n\n                /**\n                 * Check if a module has been invoked and registers it if not\n                 * @param args\n                 * @param moduleName\n                 * @returns {boolean} is new\n                 */\n                _registerInvokeList: _registerInvokeList,\n\n                /**\n                 * Register a new module and loads it, executing the run/config blocks if needed\n                 * @param providers\n                 * @param registerModules\n                 * @param params\n                 * @private\n                 */\n                _register: _register,\n\n                /**\n                 * Add a module name to the list of modules that will be loaded in the next inject\n                 * @param name\n                 * @param force\n                 * @private\n                 */\n                _addToLoadList: _addToLoadList\n            };\n        };\n\n        // Let's get the list of loaded modules & components\n        this._init(angular.element(window.document));\n    });\n\n    var bootstrapFct = angular.bootstrap;\n    angular.bootstrap = function(element, modules, config) {\n        // we use slice to make a clean copy\n        angular.forEach(modules.slice(), module => {\n            _addToLoadList(module, true);\n        });\n        return bootstrapFct(element, modules, config);\n    };\n\n    var _addToLoadList = function _addToLoadList(name, force) {\n        if((recordDeclarations.length > 0 || force) && angular.isString(name) && modulesToLoad.indexOf(name) === -1) {\n            modulesToLoad.push(name);\n        }\n    };\n\n    var ngModuleFct = angular.module;\n    angular.module = function(name, requires, configFn) {\n        _addToLoadList(name);\n        return ngModuleFct(name, requires, configFn);\n    };\n\n    // CommonJS package manager support:\n    if(typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {\n        module.exports = 'oc.lazyLoad';\n    }\n\n})(angular, window);\n","(angular => {\r\n    'use strict';\r\n\r\n    angular.module('oc.lazyLoad').directive('ocLazyLoad', function($ocLazyLoad, $compile, $animate, $parse) {\r\n        return {\r\n            restrict: 'A',\r\n            terminal: true,\r\n            priority: 1000,\r\n            compile: function(element, attrs) {\r\n                // we store the content and remove it before compilation\r\n                var content = element[0].innerHTML;\r\n                element.html('');\r\n\r\n                return function($scope, $element, $attr) {\r\n                    var model = $parse($attr.ocLazyLoad);\r\n                    $scope.$watch(() => {\r\n                        return model($scope) || $attr.ocLazyLoad; // it can be a module name (string), an object, an array, or a scope reference to any of this\r\n                    }, moduleName => {\r\n                        if(angular.isDefined(moduleName)) {\r\n                            $ocLazyLoad.load(moduleName).then(() => {\r\n                                $animate.enter(content, $element);\r\n                                let contents = element.contents();\r\n                                angular.forEach(contents, content => {\r\n                                    if(content.nodeType !== 3) { // 3 is a text node\r\n                                        $compile(content)($scope);\r\n                                    }\r\n                                });\r\n                            });\r\n                        }\r\n                    }, true);\r\n                };\r\n            }\r\n        };\r\n    });\r\n\r\n})(angular);\r\n","(angular => {\r\n    'use strict';\r\n\r\n    angular.module('oc.lazyLoad').config($provide => {\r\n        $provide.decorator('$ocLazyLoad', function($delegate, $q, $window, $interval) {\r\n            var uaCssChecked = false,\r\n                useCssLoadPatch = false,\r\n                anchor = $window.document.getElementsByTagName('head')[0] || $window.document.getElementsByTagName('body')[0];\r\n\r\n            /**\r\n             * Load a js/css file\r\n             * @param type\r\n             * @param path\r\n             * @param params\r\n             * @returns promise\r\n             */\r\n            $delegate.buildElement = function buildElement(type, path, params) {\r\n                var deferred = $q.defer(),\r\n                    el,\r\n                    loaded,\r\n                    filesCache = $delegate._getFilesCache(),\r\n                    cacheBuster = function cacheBuster(url) {\r\n                        var dc = new Date().getTime();\r\n                        if(url.indexOf('?') >= 0) {\r\n                            if(url.substring(0, url.length - 1) === '&') {\r\n                                return `${ url }_dc=${ dc }`;\r\n                            }\r\n                            return `${ url }&_dc=${ dc }`;\r\n                        } else {\r\n                            return `${ url }?_dc=${ dc }`;\r\n                        }\r\n                    };\r\n\r\n                // Store the promise early so the file load can be detected by other parallel lazy loads\r\n                // (ie: multiple routes on one page) a 'true' value isn't sufficient\r\n                // as it causes false positive load results.\r\n                if(angular.isUndefined(filesCache.get(path))) {\r\n                    filesCache.put(path, deferred.promise);\r\n                }\r\n\r\n                // Switch in case more content types are added later\r\n                switch(type) {\r\n                    case 'css':\r\n                        el = $window.document.createElement('link');\r\n                        el.type = 'text/css';\r\n                        el.rel = 'stylesheet';\r\n                        el.href = params.cache === false ? cacheBuster(path) : path;\r\n                        break;\r\n                    case 'js':\r\n                        el = $window.document.createElement('script');\r\n                        el.src = params.cache === false ? cacheBuster(path) : path;\r\n                        break;\r\n                    default:\r\n                        filesCache.remove(path);\r\n                        deferred.reject(new Error(`Requested type \"${ type }\" is not known. Could not inject \"${ path }\"`));\r\n                        break;\r\n                }\r\n                el.onload = el['onreadystatechange'] = function(e) {\r\n                    if((el['readyState'] && !/^c|loade/.test(el['readyState'])) || loaded) return;\r\n                    el.onload = el['onreadystatechange'] = null;\r\n                    loaded = 1;\r\n                    $delegate._broadcast('ocLazyLoad.fileLoaded', path);\r\n                    deferred.resolve();\r\n                };\r\n                el.onerror = function() {\r\n                    filesCache.remove(path);\r\n                    deferred.reject(new Error(`Unable to load ${ path }`));\r\n                };\r\n                el.async = params.serie ? 0 : 1;\r\n\r\n                var insertBeforeElem = anchor.lastChild;\r\n                if(params.insertBefore) {\r\n                    var element = angular.element(angular.isDefined(window.jQuery) ? params.insertBefore : document.querySelector(params.insertBefore));\r\n                    if(element && element.length > 0) {\r\n                        insertBeforeElem = element[0];\r\n                    }\r\n                }\r\n                insertBeforeElem.parentNode.insertBefore(el, insertBeforeElem);\r\n\r\n                /*\r\n                 The event load or readystatechange doesn't fire in:\r\n                 - iOS < 6       (default mobile browser)\r\n                 - Android < 4.4 (default mobile browser)\r\n                 - Safari < 6    (desktop browser)\r\n                 */\r\n                if(type == 'css') {\r\n                    if(!uaCssChecked) {\r\n                        var ua = $window.navigator.userAgent.toLowerCase();\r\n\r\n                        // iOS < 6\r\n                        if(/iP(hone|od|ad)/.test($window.navigator.platform)) {\r\n                            var v = ($window.navigator.appVersion).match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\r\n                            var iOSVersion = parseFloat([parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)].join('.'));\r\n                            useCssLoadPatch = iOSVersion < 6;\r\n                        } else if(ua.indexOf(\"android\") > -1) { // Android < 4.4\r\n                            var androidVersion = parseFloat(ua.slice(ua.indexOf(\"android\") + 8));\r\n                            useCssLoadPatch = androidVersion < 4.4;\r\n                        } else if(ua.indexOf('safari') > -1) {\r\n                            var versionMatch = ua.match(/version\\/([\\.\\d]+)/i);\r\n                            useCssLoadPatch = (versionMatch && versionMatch[1] && parseFloat(versionMatch[1]) < 6);\r\n                        }\r\n                    }\r\n\r\n                    if(useCssLoadPatch) {\r\n                        var tries = 1000; // * 20 = 20000 miliseconds\r\n                        var interval = $interval(() => {\r\n                            try {\r\n                                el.sheet.cssRules;\r\n                                $interval.cancel(interval);\r\n                                el.onload();\r\n                            } catch(e) {\r\n                                if(--tries <= 0) {\r\n                                    el.onerror();\r\n                                }\r\n                            }\r\n                        }, 20);\r\n                    }\r\n                }\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            return $delegate;\r\n        })\r\n    });\r\n\r\n})(angular);\r\n","(angular => {\r\n    'use strict';\r\n\r\n    angular.module('oc.lazyLoad').config(function($provide) {\r\n        $provide.decorator('$ocLazyLoad', function($delegate, $q) {\r\n            /**\r\n             * The function that loads new files\r\n             * @param config\r\n             * @param params\r\n             * @returns {*}\r\n             */\r\n            $delegate.filesLoader = function filesLoader(config, params = {}) {\r\n                var cssFiles = [],\r\n                    templatesFiles = [],\r\n                    jsFiles = [],\r\n                    promises = [],\r\n                    cachePromise = null,\r\n                    filesCache = $delegate._getFilesCache();\r\n\r\n                $delegate.toggleWatch(true); // start watching angular.module calls\r\n\r\n                angular.extend(params, config);\r\n\r\n                var pushFile = function(path) {\r\n                    var file_type = null, m;\r\n                    if(angular.isObject(path)) {\r\n                        file_type = path.type;\r\n                        path = path.path;\r\n                    }\r\n                    cachePromise = filesCache.get(path);\r\n                    if(angular.isUndefined(cachePromise) || params.cache === false) {\r\n\r\n                        // always check for requirejs syntax just in case\r\n                        if((m = /^(css|less|html|htm|js)?(?=!)/.exec(path)) !== null) { // Detect file type using preceding type declaration (ala requireJS)\r\n                            file_type = m[1];\r\n                            path = path.substr(m[1].length + 1, path.length);  // Strip the type from the path\r\n                        }\r\n\r\n                        if(!file_type) {\r\n                            if((m = /[.](css|less|html|htm|js)?((\\?|#).*)?$/.exec(path)) !== null) {  // Detect file type via file extension\r\n                                file_type = m[1];\r\n                            } else if(!$delegate.jsLoader.hasOwnProperty('ocLazyLoadLoader') && $delegate.jsLoader.hasOwnProperty('load')) { // requirejs\r\n                                file_type = 'js';\r\n                            } else {\r\n                                $delegate._$log.error(`File type could not be determined. ${ path }`);\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if((file_type === 'css' || file_type === 'less') && cssFiles.indexOf(path) === -1) {\r\n                            cssFiles.push(path);\r\n                        } else if((file_type === 'html' || file_type === 'htm') && templatesFiles.indexOf(path) === -1) {\r\n                            templatesFiles.push(path);\r\n                        } else if(file_type === 'js' || jsFiles.indexOf(path) === -1) {\r\n                            jsFiles.push(path);\r\n                        } else {\r\n                            $delegate._$log.error(`File type is not valid. ${ path }`);\r\n                        }\r\n\r\n                    } else if(cachePromise) {\r\n                        promises.push(cachePromise);\r\n                    }\r\n                };\r\n\r\n                if(params.serie) {\r\n                    pushFile(params.files.shift());\r\n                } else {\r\n                    angular.forEach(params.files, path => {\r\n                        pushFile(path);\r\n                    });\r\n                }\r\n\r\n                if(cssFiles.length > 0) {\r\n                    var cssDeferred = $q.defer();\r\n                    $delegate.cssLoader(cssFiles, err => {\r\n                        if(angular.isDefined(err) && $delegate.cssLoader.hasOwnProperty('ocLazyLoadLoader')) {\r\n                            $delegate._$log.error(err);\r\n                            cssDeferred.reject(err);\r\n                        } else {\r\n                            cssDeferred.resolve();\r\n                        }\r\n                    }, params);\r\n                    promises.push(cssDeferred.promise);\r\n                }\r\n\r\n                if(templatesFiles.length > 0) {\r\n                    var templatesDeferred = $q.defer();\r\n                    $delegate.templatesLoader(templatesFiles, err => {\r\n                        if(angular.isDefined(err) && $delegate.templatesLoader.hasOwnProperty('ocLazyLoadLoader')) {\r\n                            $delegate._$log.error(err);\r\n                            templatesDeferred.reject(err);\r\n                        } else {\r\n                            templatesDeferred.resolve();\r\n                        }\r\n                    }, params);\r\n                    promises.push(templatesDeferred.promise);\r\n                }\r\n\r\n                if(jsFiles.length > 0) {\r\n                    var jsDeferred = $q.defer();\r\n                    $delegate.jsLoader(jsFiles, err => {\r\n                        if(angular.isDefined(err) && $delegate.jsLoader.hasOwnProperty('ocLazyLoadLoader')) {\r\n                            $delegate._$log.error(err);\r\n                            jsDeferred.reject(err);\r\n                        } else {\r\n                            jsDeferred.resolve();\r\n                        }\r\n                    }, params);\r\n                    promises.push(jsDeferred.promise);\r\n                }\r\n\r\n                if(promises.length === 0) {\r\n                    let deferred = $q.defer(),\r\n                        err = \"Error: no file to load has been found, if you're trying to load an existing module you should use the 'inject' method instead of 'load'.\";\r\n                    $delegate._$log.error(err);\r\n                    deferred.reject(err);\r\n                    return deferred.promise;\r\n                } else if(params.serie && params.files.length > 0) {\r\n                    return $q.all(promises).then(() => $delegate.filesLoader(config, params));\r\n                } else {\r\n                    return $q.all(promises).finally(res => {\r\n                        $delegate.toggleWatch(false); // stop watching angular.module calls\r\n                        return res;\r\n                    });\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Load a module or a list of modules into Angular\r\n             * @param module Mixed the name of a predefined module config object, or a module config object, or an array of either\r\n             * @param params Object optional parameters\r\n             * @returns promise\r\n             */\r\n            $delegate.load = function(originalModule, originalParams = {}) {\r\n                var self = this,\r\n                    config = null,\r\n                    deferredList = [],\r\n                    deferred = $q.defer(),\r\n                    errText;\r\n\r\n                // clean copy\r\n                var module = angular.copy(originalModule);\r\n                var params = angular.copy(originalParams);\r\n\r\n                // If module is an array, break it down\r\n                if(angular.isArray(module)) {\r\n                    // Resubmit each entry as a single module\r\n                    angular.forEach(module, m => {\r\n                        deferredList.push(self.load(m, params));\r\n                    });\r\n\r\n                    // Resolve the promise once everything has loaded\r\n                    $q.all(deferredList).then(res => {\r\n                        deferred.resolve(res);\r\n                    }, err => {\r\n                        deferred.reject(err);\r\n                    });\r\n\r\n                    return deferred.promise;\r\n                }\r\n\r\n                // Get or Set a configuration depending on what was passed in\r\n                if(angular.isString(module)) {\r\n                    config = self.getModuleConfig(module);\r\n                    if(!config) {\r\n                        config = {\r\n                            files: [module]\r\n                        };\r\n                    }\r\n                } else if(angular.isObject(module)) {\r\n                    // case {type: 'js', path: lazyLoadUrl + 'testModule.fakejs'}\r\n                    if(angular.isDefined(module.path) && angular.isDefined(module.type)) {\r\n                        config = {\r\n                            files: [module]\r\n                        };\r\n                    } else {\r\n                        config = self.setModuleConfig(module);\r\n                    }\r\n                }\r\n\r\n                if(config === null) {\r\n                    var moduleName = self._getModuleName(module);\r\n                    errText = `Module \"${ moduleName || 'unknown' }\" is not configured, cannot load.`;\r\n                    $delegate._$log.error(errText);\r\n                    deferred.reject(new Error(errText));\r\n                    return deferred.promise;\r\n                } else {\r\n                    // deprecated\r\n                    if(angular.isDefined(config.template)) {\r\n                        if(angular.isUndefined(config.files)) {\r\n                            config.files = [];\r\n                        }\r\n                        if(angular.isString(config.template)) {\r\n                            config.files.push(config.template);\r\n                        } else if(angular.isArray(config.template)) {\r\n                            config.files.concat(config.template);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var localParams = angular.extend({}, params, config);\r\n\r\n                // if someone used an external loader and called the load function with just the module name\r\n                if(angular.isUndefined(config.files) && angular.isDefined(config.name) && $delegate.moduleExists(config.name)) {\r\n                    return $delegate.inject(config.name, localParams);\r\n                }\r\n\r\n                $delegate.filesLoader(config, localParams).then(() => {\r\n                    $delegate.inject(null, localParams).then(res => {\r\n                        deferred.resolve(res);\r\n                    }, err => {\r\n                        deferred.reject(err);\r\n                    });\r\n                }, err => {\r\n                    deferred.reject(err);\r\n                });\r\n\r\n                return deferred.promise;\r\n            };\r\n\r\n            // return the patched service\r\n            return $delegate;\r\n        });\r\n    });\r\n\r\n})(angular);\r\n","(angular => {\n    'use strict';\n\n    angular.module('oc.lazyLoad').config(function($provide) {\n        $provide.decorator('$ocLazyLoad', function ($delegate, $q) {\n            /**\n             * cssLoader function\n             * @type Function\n             * @param paths array list of css files to load\n             * @param callback to call when everything is loaded. We use a callback and not a promise\n             * @param params object config parameters\n             * because the user can overwrite cssLoader and it will probably not use promises :(\n             */\n            $delegate.cssLoader = function(paths, callback, params) {\n                var promises = [];\n                angular.forEach(paths, path => {\n                    promises.push($delegate.buildElement('css', path, params));\n                });\n                $q.all(promises).then(() => {\n                    callback();\n                }, err => {\n                    callback(err);\n                });\n            };\n            $delegate.cssLoader.ocLazyLoadLoader = true;\n\n            return $delegate;\n        })\n    });\n\n})(angular);\n","(angular => {\n    'use strict';\n\n    angular.module('oc.lazyLoad').config(function($provide) {\n        $provide.decorator('$ocLazyLoad', function ($delegate, $q) {\n            /**\n             * jsLoader function\n             * @type Function\n             * @param paths array list of js files to load\n             * @param callback to call when everything is loaded. We use a callback and not a promise\n             * @param params object config parameters\n             * because the user can overwrite jsLoader and it will probably not use promises :(\n             */\n            $delegate.jsLoader = require;\n\n            return $delegate;\n        })\n    });\n\n})(angular);\n","(angular => {\n    'use strict';\n\n    angular.module('oc.lazyLoad').config(function($provide) {\n        $provide.decorator('$ocLazyLoad', function ($delegate, $templateCache, $q, $http) {\n            /**\n             * templatesLoader function\n             * @type Function\n             * @param paths array list of css files to load\n             * @param callback to call when everything is loaded. We use a callback and not a promise\n             * @param params object config parameters for $http\n             * because the user can overwrite templatesLoader and it will probably not use promises :(\n             */\n            $delegate.templatesLoader = function(paths, callback, params) {\n                var promises = [],\n                    filesCache = $delegate._getFilesCache();\n\n                angular.forEach(paths, url => {\n                    var deferred = $q.defer();\n                    promises.push(deferred.promise);\n                    $http.get(url, params).success(data => {\n                        if(angular.isString(data) && data.length > 0) {\n                            angular.forEach(angular.element(data), node => {\n                                if(node.nodeName === 'SCRIPT' && node.type === 'text/ng-template') {\n                                    $templateCache.put(node.id, node.innerHTML);\n                                }\n                            });\n                        }\n                        if(angular.isUndefined(filesCache.get(url))) {\n                            filesCache.put(url, true);\n                        }\n                        deferred.resolve();\n                    }).error(function(err) {\n                        deferred.reject(new Error(`Unable to load template file \"${ url }\": ${ err }`));\n                    });\n                });\n                return $q.all(promises).then(() => {\n                    callback();\n                }, err => {\n                    callback(err);\n                });\n            };\n            $delegate.templatesLoader.ocLazyLoadLoader = true;\n\n            return $delegate;\n        })\n    });\n\n})(angular);\n","// Array.indexOf polyfill for IE8\nif(!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(searchElement, fromIndex) {\n        var k;\n\n        // 1. Let O be the result of calling ToObject passing\n        //    the this value as the argument.\n        if(this == null) {\n            throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var O = Object(this);\n\n        // 2. Let lenValue be the result of calling the Get\n        //    internal method of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n\n        // 4. If len is 0, return -1.\n        if(len === 0) {\n            return -1;\n        }\n\n        // 5. If argument fromIndex was passed let n be\n        //    ToInteger(fromIndex); else let n be 0.\n        var n = +fromIndex || 0;\n\n        if(Math.abs(n) === Infinity) {\n            n = 0;\n        }\n\n        // 6. If n >= len, return -1.\n        if(n >= len) {\n            return -1;\n        }\n\n        // 7. If n >= 0, then Let k be n.\n        // 8. Else, n<0, Let k be len - abs(n).\n        //    If k is less than 0, then let k be 0.\n        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n        // 9. Repeat, while k < len\n        while(k < len) {\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the\n            //    HasProperty internal method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            //    i.  Let elementK be the result of calling the Get\n            //        internal method of O with the argument ToString(k).\n            //   ii.  Let same be the result of applying the\n            //        Strict Equality Comparison Algorithm to\n            //        searchElement and elementK.\n            //  iii.  If same is true, return k.\n            if(k in O && O[k] === searchElement) {\n                return k;\n            }\n            k++;\n        }\n        return -1;\n    };\n}\n"],"sourceRoot":"/source/"}